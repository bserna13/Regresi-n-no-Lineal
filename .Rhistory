knitr::opts_chunk$set(echo = TRUE)
Tiempo <- c(4.30, 4.50, 5.0, 5.20, 6.0, 6.30, 7.0, 7.50, 8.0, 8.30, 8.50, 9.0, 9.30, 9.50, 10.0, 10.30, 10.40, 10.50, 11.0, 11.0, 11.30, 11.50, 12.0, 12.30, 12.50, 13.0, 13.20, 13.30, 13.50, 14.0)
Puntaje_huevo <- c(1.5, 1.5, 2.0, 2.0, 2.2, 2.5, 3.0, 3.2, 3.2, 3.3, 3.5, 3.8, 4.0, 4.3, 4.5, 4.8, 4.8, 5.0, 5.0, 4.2, 4.0, 3.8, 3.5, 3.0, 3.8, 2.8, 2.8, 2.5, 2.2, 2.0)
plot(tiempo,Puntaje_huevo)
plot(Tiempo,Puntaje_huevo)
knitr::opts_chunk$set(echo = TRUE)
Tiempo <- c(4.30, 4.50, 5.0, 5.20, 6.0, 6.30, 7.0, 7.50, 8.0, 8.30, 8.50, 9.0, 9.30, 9.50, 10.0, 10.30, 10.40, 10.50, 11.0, 11.0, 11.30, 11.50, 12.0, 12.30, 12.50, 13.0, 13.20, 13.30, 13.50, 14.0)
Puntaje_huevo <- c(1.5, 1.7, 1.8, 2.1, 2.0, 2.4, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.5, 4.5, 4.8, 4.9, 5.0, 4.7, 4.3, 4.0, 3.9, 3.6, 3.3, 3.2, 2.8, 2.8, 2.5, 2.2, 2.0)
plot(Tiempo,Puntaje_huevo)
install.packages("GenSA")
install.packages("GenSa")
Briggs<-function(parametros){
d1<-parametros[1]
b1<-parametros[2]
e1<-parametros[3]
v1<-parametros[4]
Temp <- c(5, 10, 15, 20, 25, 30, 35, 40, 45, 50)
RGR <- c(0.1, 2, 5.7, 9.3, 19.7, 28.4, 20.3, 6.6, 1.3, 0.1)
modelo<-d1*exp(-b1*(Temp-e1)^2)
loglik<-sum(dnorm(RGR,mean=modelo,sd=sqrt(v1),log=T))
return(-loglik)
}
library(GenSA)
nimos<-c(0.1,0.001,0.1,0.1)
aximos<-c(50,50,50,100)
resu<-GenSA(c(1,1,1,1),Briggs,lower=nimos,upper=ximos)
ximos<-c(50,50,50,100)
resu<-GenSA(c(1,1,1,1),Briggs,lower=nimos,upper=ximos)
View(resu)
resu$par
ximos<-c(50,50,50,100)
resu<-GenSA(c(1,1,1,1),Briggs,lower=nimos,upper=ximos)
resu$par
nimos<-c(0.1,0.001,0.1,0.1)
ximos<-c(50,50,50,100)
resu<-GenSA(c(1,1,1,1),Briggs,lower=nimos,upper=ximos)
resu$par
resu$par
Briggs<-function(parametros){
d1<-parametros[1]
b1<-parametros[2]
e1<-parametros[3]
v1<-parametros[4]
Tiempo <-c(4.30, 4.50, 5.0, 5.20, 6.0, 6.30, 7.0, 7.50, 8.0, 8.30, 8.50, 9.0, 9.30, 9.50, 10.0, 10.30, 10.40, 10.50, 11.0, 11.0, 11.30, 11.50, 12.0, 12.30, 12.50, 13.0, 13.20, 13.30, 13.50, 14.0)
Puntaje_huevo <- c(1.5, 1.7, 1.8, 2.1, 2.0, 2.4, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.5, 4.5, 4.8, 4.9, 5.0, 4.7, 4.3, 4.0, 3.9, 3.6, 3.3, 3.2, 2.8, 2.8, 2.5, 2.2, 2.0)
modelo<-d1*exp(-b1*(Tiempo-e1)^2)
loglik<-sum(dnorm(Puntaje_huevo,mean=modelo,sd=sqrt(v1),log=T))
return(-loglik)
}
library(GenSA)
nimos<-c(0.1,0.001,0.1,0.1)
ximos<-c(50,50,50,100)
resu<-GenSA(c(1,1,1,1),Briggs,lower=nimos,upper=ximos)
resu$par
Tiempo <-c(4.30, 4.50, 5.0, 5.20, 6.0, 6.30, 7.0, 7.50, 8.0, 8.30, 8.50, 9.0, 9.30, 9.50, 10.0, 10.30, 10.40, 10.50, 11.0, 11.0, 11.30, 11.50, 12.0, 12.30, 12.50, 13.0, 13.20, 13.30, 13.50, 14.0)
y.pred<-4.37340744*exp(-0.04378453*(Temp-9.98214541)^2)
Tiempo <-c(4.30, 4.50, 5.0, 5.20, 6.0, 6.30, 7.0, 7.50, 8.0, 8.30, 8.50, 9.0, 9.30, 9.50, 10.0, 10.30, 10.40, 10.50, 11.0, 11.0, 11.30, 11.50, 12.0, 12.30, 12.50, 13.0, 13.20, 13.30, 13.50, 14.0)
y.pred<-4.37340744*exp(-0.04378453*(Tiempo-9.98214541)^2)
Puntaje_huevo <- c(1.5, 1.7, 1.8, 2.1, 2.0, 2.4, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.5, 4.5, 4.8, 4.9, 5.0, 4.7, 4.3, 4.0, 3.9, 3.6, 3.3, 3.2, 2.8, 2.8, 2.5, 2.2, 2.0)
plot(Tiempo,Puntaje_huevo)
title(main="Tiempo vs. Puntaje de sabor")
plot(Puntaje_huevo,y.pred)
y.pred(Puntaje_huevo,y.pred)
Tiempo <-c(4.30, 4.50, 5.0, 5.20, 6.0, 6.30, 7.0, 7.50, 8.0, 8.30, 8.50, 9.0, 9.30, 9.50, 10.0, 10.30, 10.40, 10.50, 11.0, 11.0, 11.30, 11.50, 12.0, 12.30, 12.50, 13.0, 13.20, 13.30, 13.50, 14.0)
y.pred<-4.37340744*exp(-0.04378453*(Tiempo-9.98214541)^2)
Puntaje_huevo <- c(1.5, 1.7, 1.8, 2.1, 2.0, 2.4, 2.8, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.5, 4.5, 4.8, 4.9, 5.0, 4.7, 4.3, 4.0, 3.9, 3.6, 3.3, 3.2, 2.8, 2.8, 2.5, 2.2, 2.0)
plot(Tiempo,Puntaje_huevo)
title(main="Tiempo vs. Puntaje de sabor")
plot(Puntaje_huevo,y.pred)
points(Puntaje_huevo,y.pred)
plot(Tiempo,Puntaje_huevo)
title(main="Tiempo vs. Puntaje de sabor")
#plot(Puntaje_huevo,y.pred)
points(Puntaje_huevo,y.pred,type="b",col="red"")
plot(Tiempo,Puntaje_huevo)
title(main="Tiempo vs. Puntaje de sabor")
plot(Tiempo,Puntaje_huevo)
title(main="Tiempo vs. Puntaje de sabor")
#plot(Puntaje_huevo,y.pred)
points(Puntaje_huevo,y.pred,type="b",col="red")
plot(Tiempo,Puntaje_huevo)
title(main="Tiempo vs. Puntaje de sabor")
plot(Tiempo,Puntaje_huevo)
title(main="Tiempo vs. Puntaje de sabor")
plot(Tiempo,Puntaje_huevo)
title(main="Tiempo vs. Puntaje de sabor")
#plot(Puntaje_huevo,y.pred)
points(Puntaje_huevo,y.pred,type="b",col="red")
plot(Tiempo,Puntaje_huevo)
title(main="Tiempo vs. Puntaje de sabor")
#plot(Puntaje_huevo,y.pred)
points(Tiempo,y.pred,type="b",col="red")
datos <- read_xls("LITROS.xlsx")
library(readxl)
datos <- read_xls("LITROS.xlsx")
datos <- read_xls("LITROS.xlsx")
datos <- read_excel("LITROS.xlsx")
View(datos)
plot(datos)
datos <- read_excel("LITROS.xlsx")
plot(datos)
datos <- read_excel("LITROS.xlsx")
View(datos)
datos[datos$Tiempo!=0.0,]
datos <- datos[datos$Tiempo!=0.0,]
plot(datos)
plot(datos$Tiempo,datos$`Volumen en L`)
library(nls2)
# Definir la función de decaimiento exponencial
modelo_exponencial <- function(tiempo, a, b) {
a * exp(b * tiempo)
}
# Definir la función de decaimiento exponencial
modelo_exponencial <- function(tiempo, a, b) {
a * exp(b * tiempo)
}
# Inicializar valores iniciales para los parámetros
iniciales <- c(a = 5, b = -0.5)
# Ajustar modelos con nls2
ajustes <- nls2(datos$`Volumen en L` ~ modelo_exponencial(datos$Tiempo, a, b),
data = datos,
start = iniciales,
algorithm = "port",
control = nls.control(maxiter = 100))
# Ajustar modelos con nls2
ajustes <- nls2(datos$`Volumen en L` ~ modelo_exponencial(datos$Tiempo, a, b),
start = iniciales,
algorithm = "port",
control = nls.control(maxiter = 100))
datos$`Volumen en L`
datos$Tiempo
# Ajustar modelos con nls2
ajustes <- nls2(datos$`Volumen en L` ~ modelo_exponencial(datos$Tiempo, a, b),
start = iniciales,
algorithm = "port",
control = nls.control(maxiter = 100))
# Inicializar valores iniciales para los parámetros
iniciales <- c(a = 100, b = -0.5)
# Ajustar modelos con nls2
ajustes <- nls2(datos$`Volumen en L` ~ modelo_exponencial(datos$Tiempo, a, b),
start = iniciales,
algorithm = "port",
control = nls.control(maxiter = 100))
# Ajustar modelos con nls2
ajustes <- nls2(datos$`Volumen en L` ~ modelo_exponencial(datos$Tiempo, a, b),
start = c(a = 100, b = -0.5),
algorithm = "port",
control = nls.control(maxiter = 100))
# Ajustar modelos con nls2
ajustes <- nls2(datos$`Volumen en L` ~ modelo_exponencial(datos$Tiempo, a, b),
start = c(a = 100, b = -0.5),
algorithm = "port")
# Ajustar modelos con nls2
ajustes <- nls2(datos$`Volumen en L` ~ modelo_exponencial(datos$Tiempo, a, b),
start = c(a = 1, b = 1),
algorithm = "port")
# Ajustar modelos con nls2
ajustes <- nls2(datos$`Volumen en L` ~ modelo_exponencial(datos$Tiempo, a, b),
start = c(a = 1, b = 1))
library(nls)
# Ajustar modelos con nls2
ajustes <- nls(datos$`Volumen en L` ~ modelo_exponencial(datos$Tiempo, a, b),
start = c(a = 1, b = 1))
x <- datos$Tiempo
y <- datos$`Volumen en L`
# Ajustar modelos con nls2
ajustes <- nls2(y ~ modelo_exponencial(x, a, b),
start = c(a = 1, b = 1))
y <- as.numeric(datos$`Volumen en L`)
x <- datos$Tiempo
# Ajustar modelos con nls2
ajustes <- nls2(y ~ modelo_exponencial(x, a, b),
start = c(a = 1, b = 1))
y
datos$`Volumen en L`
library(readxl)
datos <- read_excel("LITROS.xlsx")
datos <- datos[datos$Tiempo!=0.0,]
plot(datos$Tiempo,datos$`Volumen en L`)
library(nls2)
# Definir la función de decaimiento exponencial
modelo_exponencial <- function(tiempo, a, b) {
a * exp(b * tiempo)
}
# Inicializar valores iniciales para los parámetros
iniciales <- c(a = 1, b = 1)
x <- datos$Tiempo
y <- as.numeric(datos$`Volumen en L`)
# Ajustar modelos con nls2
ajustes <- nls2(y ~ modelo_exponencial(x, a, b),
start = c(a = 1, b = 1))
y
x
# Ajustar modelos con nls2
ajustes <- nls2(y ~ modelo_exponencial(x, a, b),
start = c(a = 1, b = -0.5))
# Ajustar modelos con nls2
ajustes <- nls2(y ~ modelo_exponencial(x, a, b),
start = c(a = 10, b = -0.5))
# Ajustar modelos con nls2
ajustes <- nls2(y ~ modelo_exponencial(x, a, b),
start = c(a = 10, b = -0.5),
control = nls.control(maxiter = 100)))
# Ajustar modelos con nls2
ajustes <- nls2(y ~ modelo_exponencial(x, a, b),
start = c(a = 10, b = -0.5),
control = nls.control(maxiter = 100))
# Ajustar modelos con nls2
ajustes <- nls2(y ~ modelo_exponencial(x, a, b),
start = c(a = 10, b = -0.5),
control = nls.control(maxiter = 200))
# Ajustar modelos con nls2
ajustes <- nls2(y ~ modelo_exponencial(x, a, b),
start = c(a = 10, b = -0.5),
control = nls.control(maxiter = 1000))
y
x
# Ajustar modelos con nls2
ajustes <- ml(y ~ x)
# Ajustar modelos con nls2
ajustes <- lm(y ~ x)
ajustes
# Ajustar modelos con nls2
ajustes <- nls2(y ~ modelo_exponencial(x,a,b))
plot(x,modelo_exponencial(x,10,-0.5))
plot(x,modelo_exponencial(x,30,-0.5))
plot(x,modelo_exponencial(x,30,-0.1))
plot(x,modelo_exponencial(x,30,-0.3))
plot(x,modelo_exponencial(x,30,-0.01))
plot(x,modelo_exponencial(x,30,-0.1))
plot(x,modelo_exponencial(x,30,-0.2))
# Ajustar modelos con nls2
ajustes <- nls2(y ~ modelo_exponencial(x,a,b),
start = c(a=30,b=-0.2))
# Mostrar resumen de los ajustes
summary(ajustes)
plot(x,y)
ajustes$call
ajustes$dataClasses
plot(x,y)
point(x,25.4722*exp(-0.1666*x))
plot(x,y)
points(x,25.4722*exp(-0.1666*x),type="b",col="red")
plot(x,y)
points(order(x),25.4722*exp(-0.1666*order(x)),type="b",col="red")
order(x)
sort.list(x)
x
x[order(x)]
plot(x,y)
points(x[order(x)],25.4722*exp(-0.1666*x[order(x)]),type="b",col="red")
plot(x,modelo_exponencial(x,30,-0.1))
plot(x,modelo_exponencial(x,25,-0.1666))
plot(x,modelo_exponencial(x,20,-0.1666))
plot(x,modelo_exponencial(x,30,-0.1666))
plot(x,modelo_exponencial(x,30,-0.10))
plot(x,modelo_exponencial(x,30,-0.09))
# Ajustar modelos con nls2
ajustes <- nls2(y ~ modelo_exponencial(x,a,b),
start = c(a=30,b=-0.09))
# Mostrar resumen de los ajustes
summary(ajustes)
# Ajustar modelos con nls2
ajustes <- nls2(y ~ modelo_exponencial(x,a,b),
start = c(a=30,b=-0.05))
# Mostrar resumen de los ajustes
summary(ajustes)
# Mostrar resumen de los ajustes
summary(ajustes)
```{r}
plot(x,y)
points(x[order(x)],25.4722*exp(-0.1666*x[order(x)]),type="b",col="red")
points(x[order(x)],25.4722*exp(-0.09*x[order(x)]),type="b",col="red")
plot(x,y)
points(x[order(x)],25.4722*exp(-0.09*x[order(x)]),type="b",col="red")
plot(x,y)
points(x[order(x)],25.4722*exp(-0.1*x[order(x)]),type="b",col="red")
plot(x,y)
points(x[order(x)],25.4722*exp(-0.166*x[order(x)]),type="b",col="red")
plot(x,y)
points(x[order(x)],25.4722*exp(-0.19*x[order(x)]),type="b",col="red")
plot(x,y)
points(x[order(x)],25.4722*exp(-0.166666*x[order(x)]),type="b",col="red")
plot(x,y)
points(x[order(x)],25.4722*exp(-0.17*x[order(x)]),type="b",col="red")
plot(x,y)
points(x[order(x)],25.4722*exp(-0.175*x[order(x)]),type="b",col="red")
plot(x,y)
points(x[order(x)],25.4722*exp(-0.17*x[order(x)]),type="b",col="red")
1:9
datos <- data.frame(semana <- (1:9),
Peso <- (24,30.5,36.5,44.5,48,51.5,59.5,66.5,65.5)
c(2,3)
datos <- data.frame(semana <- c(1:9),
Peso <- c(24,30.5,36.5,44.5,48,51.5,59.5,66.5,65.5)
)
View(datos)
datos <- data.frame(semana = c(1:9),
Peso = c(24,30.5,36.5,44.5,48,51.5,59.5,66.5,65.5)
)
View(datos)
datos <- data.frame(semana = c(1:9,
1:9,
1:9,
1:9,
1:9),
Peso = c(24,30.5,36.5,44.5,48,51.5,59.5,66.5,65.5,
25.5,31,39,42,48,59,58,75.5,64,
30,32,39.5,47.5,55.5,56,56,63.5,67.5,
22.5,34.5,33,42,51.5,55.5,68,72.5,72.5,
24.5,33,39,43,43.5,56,62.5,73,80.5)
)
datos <- data.frame(semana = c(1:9,
1:9,
1:9,
1:9,
1:9),
Peso = c(24,30.5,36.5,44.5,48,51.5,59.5,66.5,65.5,
25.5,31,39,42,48,59,58,75.5,64,
30,32,39.5,47.5,55.5,56,56,63.5,67.5,
22.5,34.5,33,42,51.5,55.5,68,72.5,72.5,
24.5,33,39,43,43.5,56,62.5,73,80.5))
View(datos)
plot(datos$semana,datos$Peso)
pesos <- datos$Peso
semanas <- datos$semana
pesos <- datos$Peso
plot(semanas, semanas^2)
plot(semanas, -semanas^2)
plot(semanas, 26-semanas^2)
plot(semanas, 26-(semanas+30)^2)
plot(semanas, 26-(semanas+20)^2)
plot(semanas, 26+(semanas+20)^2)
plot(semanas, 26+(semanas)^2)
plot(semanas, 26+0.5(semanas)^2)
plot(semanas, 26+0.5*(semanas)^2)
plot(semanas, 26+0.6*(semanas)^2)
plot(semanas, 26+0.7*(semanas)^2)
plot(semanas, 26+0.65*(semanas)^2)
plot(semanas, 26+0.62*(semanas)^2)
plot(semanas, 26-0.62*(semanas)^2)
plot(semanas, -26+0.62*(semanas)^2)
plot(semanas, +26+0.62*(semanas)^2)
plot(semanas, 65-(x-9)^2)
plot(semanas, 65-(semanas-9)^2)
plot(semanas, 65-2*(semanas-9)^2)
plot(semanas, 65-0.5*(semanas-9)^2)
plot(semanas, 65-0.4*(semanas-9)^2)
plot(semanas, 65-0.6*(semanas-9)^2)
library(nls2)
# Definir la función de decaimiento exponencial
modelo_polinomial <- function(semana, a, b, c) {
c-b*(semanas-a)^2
}
# Ajustar modelos con nls2
ajustes <- nls2(pesos ~ modelo_polinomial(semanas,a,b,c),
start = c(c=65,b=0.6,a=9))
# Mostrar resumen de los ajustes
summary(ajustes)
plot(semanas,pesos)
points(semanas[order(semanas)],
153.93176 - 0.08247*(semanas-40.50893)^2),type="b",col="red")
points(semanas[order(semanas)],
153.93176 - 0.08247*(semanas[order(semanas)-40.50893)^2)
153.93176 - 0.08247*(semanas[order(semanas)-40.50893)^2)
points(semanas[order(semanas)],
153.93176 - 0.08247*(semanas[order(semanas)]-40.50893)^2
,type="b",col="red")
plot(semanas,pesos)
points(semanas[order(semanas)],
153.93176 - 0.08247*(semanas[order(semanas)]-40.50893)^2
,type="b",col="red")
